@import './colors';

/**
 SOME BASIC MIXINS TO REUSE ALONG THE PLATFORM
 */

@mixin placeholder() {
  font-family: 'Circular Std Book';
  font-size: 14px;
  color: $greyish-brown;
}

@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
  transform: rotate($deg + deg);
  -o-transform: rotate($deg + deg);
  -ms-transform: rotate($deg + deg);
  -moz-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
}

@mixin transform($params, $origin: 50% 50%, $persp: 300px) {
  -o-transform:				$params;
  transform:					$params;
  -moz-transform:				$params;
  -ms-transform:				$params;
  -webkit-transform:			$params;

  transform-origin:			$origin;
  -o-transform-origin:		$origin;
  -ms-transform-origin:		$origin;
  -moz-transform-origin:		$origin;
  -webkit-transform-origin:	$origin;

  perspective:				$persp;
  -o-perspective:				$persp;
  -moz-perspective:			$persp;
  -ms-perspective:			$persp;
  -webkit-perspective:		$persp;
}

@mixin transition($what: all, $length: 1s, $easing: ease-in-out) {
  -moz-transition:    $what $length $easing;
  -o-transition:      $what $length $easing;
  -webkit-transition: $what $length $easing;
  -ms-transition:     $what $length $easing;
  transition:         $what $length $easing;

}

@mixin animation($name, $duration: 1s, $easing: ease-out, $delay: 0, $iteration: infinite, $direction: normal, $fill: none){
  animation:         $name $duration $easing $delay $iteration $direction $fill;
  -o-animation:       $name $duration $easing $delay $iteration $direction $fill;
  -webkit-animation:  $name $duration $easing $delay $iteration $direction $fill;
  -moz-animation:     $name $duration $easing $delay $iteration $direction $fill;
}

@mixin slideDownKeyFrame( $animationName, $min, $max )
{
  @-webkit-keyframes #{$animationName} {
    0% {
      min-height: $min;
    }
    100% {
      min-height: $max;
    }
  }
  @-moz-keyframes #{$animationName} {
    0% {
      min-height: $min;
    }
    100% {
      min-height: $max;
    }
  }
  @-o-keyframes #{$animationName} {
    0% {
      min-height: $min;
    }
    100% {
      min-height: $max;
    }
  }
  @keyframes #{$animationName} {
    0% {
      min-height: $min;
    }
    100% {
      min-height: $max;
    }
  }
}


// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
  display: flex;
  display: -moz-box;
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  flex: $values;
  -ms-flex: $values;
  -webkit-flex: $values;
  -moz-box-flex: $values;
  -webkit-box-flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  flex-direction: $direction;
  -ms-flex-direction: $direction;
  -moz-flex-direction: $direction;
  -webkit-flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  -moz-flex-wrap: $wrap;
  -webkit-flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  flex-flow: $flow;
  -ms-flex-flow: $flow;
  -moz-flex-flow: $flow;
  -webkit-flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  order: $val;
  -webkit-order: $val;
  -ms-flex-order: $val;
  -moz-box-ordinal-group: $val;
  -webkit-box-ordinal-group: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  flex-grow: $grow;
  -ms-flex-grow: $grow;
  -moz-flex-grow: $grow;
  -webkit-flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
  flex-shrink: $shrink;
  -ms-flex-shrink: $shrink;
  -moz-flex-shrink: $shrink;
  -webkit-flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
  flex-basis: $width;
  -ms-flex-basis: $width;
  -moz-flex-basis: $width;
  -webkit-flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  -ms-flex-pack: $justify;
  justify-content: $justify;
  -ms-justify-content: $justify;
  -moz-justify-content: $justify;
  -webkit-justify-content: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
  align-content: $align;
  -ms-align-content: $align;
  -moz-align-content: $align;
  -webkit-align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  align-items: $align;
  -ms-align-items: $align;
  -moz-align-items: $align;
  -webkit-align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
  align-self: $align;
  -ms-align-self: $align;
  -moz-align-self: $align;
  -webkit-align-self: $align;
}


// Placeholder component mixin
@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin setPlaceholderDesing {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }

  @include optional-at-root(':-moz-placeholder') {
    @content;
  }

  @include optional-at-root('::-moz-placeholder') {
    @content;
  }

  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}
